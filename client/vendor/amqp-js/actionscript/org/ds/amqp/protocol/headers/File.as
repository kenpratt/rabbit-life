/**
---------------------------------------------------------------------------

Copyright (c) 2009 Dan Simpson

Auto-Generated @ Wed Aug 26 19:21:28 -0700 2009.  Do not edit this file, extend it you must.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------
**/


/*
Documentation

  The file class provides methods that support reliable file transfer.
  File messages have a specific set of properties that are required for
  interoperability with file transfer applications. File messages and
  acknowledgements are subject to channel transactions.  Note that the
  file class does not provide message browsing methods; these are not
  compatible with the staging model.  Applications that need browsable
  file transfer should use Basic content and the Basic class.
 namegrammarcontent
    file                = C:QOS S:QOS-OK
                        / C:CONSUME S:CONSUME-OK
                        / C:CANCEL S:CANCEL-OK
                        / C:OPEN S:OPEN-OK C:STAGE content
                        / S:OPEN C:OPEN-OK S:STAGE content
                        / C:PUBLISH
                        / S:DELIVER
                        / S:RETURN
                        / C:ACK
                        / C:REJECT
 namerulecontent
  The server MUST make a best-effort to hold file messages on a
  reliable storage mechanism.
 namerulecontent
  The server MUST NOT discard a file message in case of a queue
  overflow. The server MUST use the Channel.Flow method to slow or stop
  a file message publisher when necessary.
 namerulecontent
  The server MUST implement at least 2 priority levels for file
  messages, where priorities 0-4 and 5-9 are treated as two distinct
  levels. The server MAY implement up to 10 priority levels.
 namerulecontent
  The server MUST support both automatic and explicit acknowledgements
  on file content.

*/
package org.ds.amqp.protocol.headers
{
	import flash.utils.ByteArray;
	import flash.utils.Dictionary;
	import org.ds.amqp.datastructures.*;
	import org.ds.amqp.transport.Buffer;
	import org.ds.amqp.protocol.Header;
	
	public dynamic class File extends Header
	{

		//
		public var contentType             :String;

		//
		public var contentEncoding         :String;

		//
		public var headers                 :FieldTable;

		//
		public var priority                :uint;

		//
		public var replyTo                 :String;

		//
		public var messageId               :String;

		//
		public var filename                :String;

		//
		public var timestamp               :Date;

		//
		public var clusterId               :String;


		public function File() {
			_classId  = 70;
		}

		public override function writeProperties(buf:Buffer):void {

			buf.writeShortString(this.contentType);
			buf.writeShortString(this.contentEncoding);
			buf.writeTable(this.headers);
			buf.writeOctet(this.priority);
			buf.writeShortString(this.replyTo);
			buf.writeShortString(this.messageId);
			buf.writeShortString(this.filename);
			buf.writeTimestamp(this.timestamp);
			buf.writeShortString(this.clusterId);
		}

		public override function readProperties(buf:Buffer):void {

			this.contentType      = buf.readShortString();
			this.contentEncoding  = buf.readShortString();
			this.headers          = buf.readTable();
			this.priority         = buf.readOctet();
			this.replyTo          = buf.readShortString();
			this.messageId        = buf.readShortString();
			this.filename         = buf.readShortString();
			this.timestamp        = buf.readTimestamp();
			this.clusterId        = buf.readShortString();
		}
		
		public override function print():void {
			printObj("FileHeader", this);
		}
	}
}