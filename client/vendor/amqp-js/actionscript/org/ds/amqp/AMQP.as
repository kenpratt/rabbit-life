/**
---------------------------------------------------------------------------

Copyright (c) 2009 Dan Simpson

Auto-Generated @ Wed Aug 26 19:21:28 -0700 2009.  Do not edit this file, extend it you must.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------
**/

package org.ds.amqp
{
	import flash.utils.Dictionary;
	import org.ds.amqp.protocol.Header;
	import org.ds.amqp.protocol.Method;
	import org.ds.amqp.protocol.headers.*;
	
	import org.ds.amqp.protocol.connection.*;
	import org.ds.amqp.protocol.channel.*;
	import org.ds.amqp.protocol.access.*;
	import org.ds.amqp.protocol.exchange.*;
	import org.ds.amqp.protocol.queue.*;
	import org.ds.amqp.protocol.basic.*;
	import org.ds.amqp.protocol.file.*;
	import org.ds.amqp.protocol.stream.*;
	import org.ds.amqp.protocol.tx.*;
	import org.ds.amqp.protocol.dtx.*;
	import org.ds.amqp.protocol.tunnel.*;
	import org.ds.amqp.protocol.test.*;
	
	public class AMQP
	{

		public static var FRAME_METHOD            :int = 1;
		public static var FRAME_HEADER            :int = 2;
		public static var FRAME_BODY              :int = 3;
		public static var FRAME_OOB_METHOD        :int = 4;
		public static var FRAME_OOB_HEADER        :int = 5;
		public static var FRAME_OOB_BODY          :int = 6;
		public static var FRAME_TRACE             :int = 7;
		public static var FRAME_HEARTBEAT         :int = 8;
		public static var FRAME_MIN_SIZE          :int = 4096;
		public static var FRAME_END               :int = 206;
		public static var REPLY_SUCCESS           :int = 200;
		public static var NOT_DELIVERED           :int = 310;
		public static var CONTENT_TOO_LARGE       :int = 311;
		public static var CONNECTION_FORCED       :int = 320;
		public static var INVALID_PATH            :int = 402;
		public static var ACCESS_REFUSED          :int = 403;
		public static var NOT_FOUND               :int = 404;
		public static var RESOURCE_LOCKED         :int = 405;
		public static var FRAME_ERROR             :int = 501;
		public static var SYNTAX_ERROR            :int = 502;
		public static var COMMAND_INVALID         :int = 503;
		public static var CHANNEL_ERROR           :int = 504;
		public static var RESOURCE_ERROR          :int = 506;
		public static var NOT_ALLOWED             :int = 530;
		public static var NOT_IMPLEMENTED         :int = 540;
		public static var INTERNAL_ERROR          :int = 541;
		public static var PROTOCOL_MAJOR          :int = 8;
		public static var PROTOCOL_MINOR          :int = 0;
		public static var COMMENT                 :String = "AMQ protocol 0.80";
		public static var PORT                    :int = 5672;
		
		private static var classMap		:Dictionary = new Dictionary();
		private static var methodMap	:Dictionary = new Dictionary();
		
		classMap[10]		= Connection;
		methodMap[10] 		= new Dictionary();
		methodMap[10][10]	= ConnectionStart;
		methodMap[10][11]	= ConnectionStartOk;
		methodMap[10][20]	= ConnectionSecure;
		methodMap[10][21]	= ConnectionSecureOk;
		methodMap[10][30]	= ConnectionTune;
		methodMap[10][31]	= ConnectionTuneOk;
		methodMap[10][40]	= ConnectionOpen;
		methodMap[10][41]	= ConnectionOpenOk;
		methodMap[10][50]	= ConnectionRedirect;
		methodMap[10][60]	= ConnectionClose;
		methodMap[10][61]	= ConnectionCloseOk;
		
		classMap[20]		= Channel;
		methodMap[20] 		= new Dictionary();
		methodMap[20][10]	= ChannelOpen;
		methodMap[20][11]	= ChannelOpenOk;
		methodMap[20][20]	= ChannelFlow;
		methodMap[20][21]	= ChannelFlowOk;
		methodMap[20][30]	= ChannelAlert;
		methodMap[20][40]	= ChannelClose;
		methodMap[20][41]	= ChannelCloseOk;
		
		classMap[30]		= Access;
		methodMap[30] 		= new Dictionary();
		methodMap[30][10]	= AccessRequest;
		methodMap[30][11]	= AccessRequestOk;
		
		classMap[40]		= Exchange;
		methodMap[40] 		= new Dictionary();
		methodMap[40][10]	= ExchangeDeclare;
		methodMap[40][11]	= ExchangeDeclareOk;
		methodMap[40][20]	= ExchangeDelete;
		methodMap[40][21]	= ExchangeDeleteOk;
		
		classMap[50]		= Queue;
		methodMap[50] 		= new Dictionary();
		methodMap[50][10]	= QueueDeclare;
		methodMap[50][11]	= QueueDeclareOk;
		methodMap[50][20]	= QueueBind;
		methodMap[50][21]	= QueueBindOk;
		methodMap[50][30]	= QueuePurge;
		methodMap[50][31]	= QueuePurgeOk;
		methodMap[50][40]	= QueueDelete;
		methodMap[50][41]	= QueueDeleteOk;
		
		classMap[60]		= Basic;
		methodMap[60] 		= new Dictionary();
		methodMap[60][10]	= BasicQos;
		methodMap[60][11]	= BasicQosOk;
		methodMap[60][20]	= BasicConsume;
		methodMap[60][21]	= BasicConsumeOk;
		methodMap[60][30]	= BasicCancel;
		methodMap[60][31]	= BasicCancelOk;
		methodMap[60][40]	= BasicPublish;
		methodMap[60][50]	= BasicReturn;
		methodMap[60][60]	= BasicDeliver;
		methodMap[60][70]	= BasicGet;
		methodMap[60][71]	= BasicGetOk;
		methodMap[60][72]	= BasicGetEmpty;
		methodMap[60][80]	= BasicAck;
		methodMap[60][90]	= BasicReject;
		methodMap[60][100]	= BasicRecover;
		
		classMap[70]		= File;
		methodMap[70] 		= new Dictionary();
		methodMap[70][10]	= FileQos;
		methodMap[70][11]	= FileQosOk;
		methodMap[70][20]	= FileConsume;
		methodMap[70][21]	= FileConsumeOk;
		methodMap[70][30]	= FileCancel;
		methodMap[70][31]	= FileCancelOk;
		methodMap[70][40]	= FileOpen;
		methodMap[70][41]	= FileOpenOk;
		methodMap[70][50]	= FileStage;
		methodMap[70][60]	= FilePublish;
		methodMap[70][70]	= FileReturn;
		methodMap[70][80]	= FileDeliver;
		methodMap[70][90]	= FileAck;
		methodMap[70][100]	= FileReject;
		
		classMap[80]		= Stream;
		methodMap[80] 		= new Dictionary();
		methodMap[80][10]	= StreamQos;
		methodMap[80][11]	= StreamQosOk;
		methodMap[80][20]	= StreamConsume;
		methodMap[80][21]	= StreamConsumeOk;
		methodMap[80][30]	= StreamCancel;
		methodMap[80][31]	= StreamCancelOk;
		methodMap[80][40]	= StreamPublish;
		methodMap[80][50]	= StreamReturn;
		methodMap[80][60]	= StreamDeliver;
		
		classMap[90]		= Tx;
		methodMap[90] 		= new Dictionary();
		methodMap[90][10]	= TxSelect;
		methodMap[90][11]	= TxSelectOk;
		methodMap[90][20]	= TxCommit;
		methodMap[90][21]	= TxCommitOk;
		methodMap[90][30]	= TxRollback;
		methodMap[90][31]	= TxRollbackOk;
		
		classMap[100]		= Dtx;
		methodMap[100] 		= new Dictionary();
		methodMap[100][10]	= DtxSelect;
		methodMap[100][11]	= DtxSelectOk;
		methodMap[100][20]	= DtxStart;
		methodMap[100][21]	= DtxStartOk;
		
		classMap[110]		= Tunnel;
		methodMap[110] 		= new Dictionary();
		methodMap[110][10]	= TunnelRequest;
		
		classMap[120]		= Test;
		methodMap[120] 		= new Dictionary();
		methodMap[120][10]	= TestInteger;
		methodMap[120][11]	= TestIntegerOk;
		methodMap[120][20]	= TestString;
		methodMap[120][21]	= TestStringOk;
		methodMap[120][30]	= TestTable;
		methodMap[120][31]	= TestTableOk;
		methodMap[120][40]	= TestContent;
		methodMap[120][41]	= TestContentOk;
		

		public static function getClass(id:int):Header {
			return new classMap[id]();
		}
		
		public static function getMethod(cid:int,id:int):Method {
			return new methodMap[cid][id]();
		}
	}
}